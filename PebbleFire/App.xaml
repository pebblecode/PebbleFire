<Application
    x:Class="PebbleFire.App"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:Controls="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"
    xmlns:Converters="clr-namespace:MahApps.Metro.Converters;assembly=MahApps.Metro"
    xmlns:pebble="clr-namespace:PebbleFire"
    StartupUri="MainWindow.xaml">
    <Application.Resources>
  
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Colours.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Fonts.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.AnimatedSingleRowTabControl.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Accents/Blue.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Accents/BaseLight.xaml" />
            </ResourceDictionary.MergedDictionaries>

            <pebble:ViewModelLocator x:Key="ViewModelLocator"/>

            <Converters:ToUpperConverter x:Key="ToUpperConverter" />
            <Converters:ToLowerConverter x:Key="ToLowerConverter" />

            <Style x:Key="SquareToggleButton" TargetType="{x:Type ToggleButton}">
                <Setter Property="MinHeight" Value="25" />
                <Setter Property="FontFamily" Value="{DynamicResource DefaultFont}" />
                <Setter Property="FontWeight" Value="SemiBold" />
                <Setter Property="Background" Value="{DynamicResource GrayBrush7}" />
                <Setter Property="BorderBrush" Value="{DynamicResource BlackBrush}" />
                <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
                <Setter Property="Padding" Value="5,6" />
                <Setter Property="BorderThickness" Value="1" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Grid>
                                <VisualStateManager.VisualStateGroups>
                                    <VisualStateGroup x:Name="CommonStates">
                                        <VisualState x:Name="Normal" />
                                        <VisualState x:Name="MouseOver">
                                            <Storyboard>
                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="MouseOverBorder">
                                                    <EasingDoubleKeyFrame KeyTime="0" Value="1" />
                                                </DoubleAnimationUsingKeyFrames>
                                                <ThicknessAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderThickness)" Storyboard.TargetName="MouseOverBorder">
                                                    <EasingThicknessKeyFrame KeyTime="0" Value="2"/>
                                                </ThicknessAnimationUsingKeyFrames>
                                            </Storyboard>
                                        </VisualState>
                                        <VisualState x:Name="Pressed">
                                            <Storyboard>
                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="PressedBorder">
                                                    <EasingDoubleKeyFrame KeyTime="0" Value="1" />
                                                </DoubleAnimationUsingKeyFrames>
                                                <ThicknessAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderThickness)" Storyboard.TargetName="MouseOverBorder">
                                                    <EasingThicknessKeyFrame KeyTime="0" Value="0"/>
                                                </ThicknessAnimationUsingKeyFrames>
                                                <ThicknessAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderThickness)" Storyboard.TargetName="PressedBorder">
                                                    <EasingThicknessKeyFrame KeyTime="0" Value="2"/>
                                                </ThicknessAnimationUsingKeyFrames>
                                            </Storyboard>
                                        </VisualState>
                                        <VisualState x:Name="Checked">
                                            <Storyboard>
                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="PressedBorder">
                                                    <EasingDoubleKeyFrame KeyTime="0" Value="1" />
                                                </DoubleAnimationUsingKeyFrames>
                                                <ThicknessAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderThickness)" Storyboard.TargetName="MouseOverBorder">
                                                    <EasingThicknessKeyFrame KeyTime="0" Value="0"/>
                                                </ThicknessAnimationUsingKeyFrames>
                                                <ThicknessAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderThickness)" Storyboard.TargetName="PressedBorder">
                                                    <EasingThicknessKeyFrame KeyTime="0" Value="2"/>
                                                </ThicknessAnimationUsingKeyFrames>
                                            </Storyboard>
                                        </VisualState>
                                        <VisualState x:Name="Disabled">
                                            <Storyboard>
                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity"
                        							Storyboard.TargetName="DisabledVisualElement">
                                                    <SplineDoubleKeyFrame KeyTime="0"
                        								Value="0.7" />
                                                </DoubleAnimationUsingKeyFrames>
                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)"
                        							Storyboard.TargetName="contentPresenter">
                                                    <EasingDoubleKeyFrame KeyTime="0"
                        								Value="0.3" />
                                                </DoubleAnimationUsingKeyFrames>
                                            </Storyboard>
                                        </VisualState>
                                    </VisualStateGroup>
                                    <VisualStateGroup x:Name="FocusStates">
                                        <VisualState x:Name="Focused"/>
                                        <VisualState x:Name="Unfocused" />
                                    </VisualStateGroup>
                                    <VisualStateGroup x:Name="ValidationStates">
                                        <VisualState x:Name="Valid"/>
                                        <VisualState x:Name="InvalidFocused"/>
                                        <VisualState x:Name="InvalidUnfocused"/>
                                    </VisualStateGroup>
                                </VisualStateManager.VisualStateGroups>
                                <Border x:Name="Background" BorderBrush="{DynamicResource BlackBrush}" BorderThickness="2" Background="{DynamicResource WhiteColorBrush}" />
                                <Rectangle x:Name="DisabledVisualElement"
                        			Fill="{DynamicResource ControlsDisabledBrush}"
                        			IsHitTestVisible="false"
                        			Opacity="0" />
                                <Border x:Name="MouseOverBorder"
                        			Background="{DynamicResource GrayBrush8}"
                        			Opacity="0" />
                                <Border x:Name="PressedBorder" Background="{DynamicResource BlackBrush}" Opacity="0" BorderBrush="{DynamicResource BlackBrush}" />
                                <ContentPresenter x:Name="contentPresenter"
                        			ContentTemplate="{TemplateBinding ContentTemplate}"
                        			Content="{TemplateBinding Content, Converter={StaticResource ToLowerConverter}}"
                        			HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                        			Margin="{TemplateBinding Padding}"
                                    RecognizesAccessKey="True"
                        			VerticalAlignment="{TemplateBinding VerticalContentAlignment}" OpacityMask="{x:Null}" />
                            </Grid>

                            <ControlTemplate.Triggers>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter Property="Foreground" Value="{DynamicResource WhiteColorBrush}" />
                                </Trigger>
                                <Trigger Property="IsChecked" Value="true">
                                    <Setter Property="Foreground" Value="{DynamicResource WhiteColorBrush}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <DataTemplate x:Key="RoomListBoxItemTemplate">
                <Grid
                    Margin="-5,0,0,0">
                    <ToggleButton
                        Padding="10"
                        Content="{Binding Name}"
                        IsChecked="{Binding IsSelected, UpdateSourceTrigger=PropertyChanged}"
                        HorizontalAlignment="Stretch"/>
                </Grid>
            </DataTemplate>

            <DataTemplate x:Key="MessageTemplate">
                <pebble:MessageControl DataContext="{Binding}"/>
            </DataTemplate>

            <DataTemplate x:Key="RoomMessagesTemplate">
                <Grid>
                    <ItemsControl
                        ItemTemplate="{StaticResource MessageTemplate}"
				        ItemsSource="{Binding Path=Messages}"
				        HorizontalContentAlignment="Stretch"
				        ScrollViewer.HorizontalScrollBarVisibility="Disabled">
                    </ItemsControl>
                </Grid>
            </DataTemplate>

        </ResourceDictionary>
    </Application.Resources>
</Application>
